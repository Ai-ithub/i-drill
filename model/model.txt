### دستورالعمل برای توسعه‌دهندگان مدل‌های یادگیری عمیق یا یادگیری ماشین

**توضیحات:**  
هر فردی که روی توسعه مدل‌های یادگیری عمیق یا یادگیری ماشین کار می‌کند، باید مراحل زیر را به‌دقت دنبال کند. این دستورالعمل شامل نحوه نوشتن مدل، ذخیره‌سازی آن به فرمت ONNX، قرار دادن آن در پوشه مربوطه و نوشتن کلاسی برای استفاده از مدل و انجام پیش‌بینی است.

---

### **مراحل لازم**

1. **نوشتن مدل با TensorFlow یا PyTorch:**
   - مدل خود را با استفاده از یکی از کتابخانه‌های TensorFlow یا PyTorch بنویسید.
   - مطمئن شوید که مدل به‌درستی آموزش دیده و تست شده است.

2. **ذخیره مدل به فرمت ONNX:**
   - پس از تکمیل آموزش مدل، آن را به فرمت ONNX تبدیل کنید. این فرمت برای انتقال مدل‌ها بین محیط‌های مختلف مناسب است.
   - برای TensorFlow:
     ```python
     import tf2onnx
     import tensorflow as tf

     # مدل خود را بارگذاری کنید
     model = tf.keras.models.load_model('path_to_your_model.h5')

     # مدل را به ONNX تبدیل کنید
     onnx_model, _ = tf2onnx.convert.from_keras(model, opset=13)
     with open("model.onnx", "wb") as f:
         f.write(onnx_model.SerializeToString())
     ```
   - برای PyTorch:
     ```python
     import torch
     import torch.onnx

     # مدل خود را بارگذاری کنید
     model = torch.load('path_to_your_model.pth')
     model.eval()

     # ورودی نمونه برای تبدیل به ONNX
     dummy_input = torch.randn(1, input_size)

     # مدل را به ONNX تبدیل کنید
     torch.onnx.export(model, dummy_input, "model.onnx", opset_version=11)
     ```

3. **قرار دادن مدل در پوشه مربوطه:**
   - فایل ONNX حاصل را در پوشه `model directory` پروژه قرار دهید.
   - مسیر فایل ONNX را در مستندات پروژه ثبت کنید.

4. **نوشتن کلاس برای استفاده از مدل:**
   - یک کلاس بنویسید که مدل را بارگذاری کند، داده‌ها را از پایگاه داده دریافت کند، پیش‌بینی انجام دهد و نتیجه را بازگرداند.

---

### **کد نمونه برای کلاس پیش‌بینی**

```python
import onnxruntime as ort
import numpy as np
from database_module import get_data_from_database  # فرض کنید این ماژول برای دریافت داده‌ها از پایگاه داده است

class ModelPredictor:
    def __init__(self, model_name, model_path):
        """
        سازنده کلاس
        :param model_name: نام مدل
        :param model_path: مسیر فایل ONNX مدل
        """
        self.model_name = model_name
        self.session = ort.InferenceSession(model_path)

    def preprocess_data(self, data):
        """
        پیش‌پردازش داده‌ها برای مدل
        :param data: داده‌های خام
        :return: داده‌های پیش‌پردازش‌شده
        """
        # اعمال پیش‌پردازش لازم (مثل نرمال‌سازی یا تغییر شکل داده‌ها)
        processed_data = np.array(data, dtype=np.float32)  # مثال ساده
        return processed_data

    def predict(self, input_data):
        """
        انجام پیش‌بینی با استفاده از مدل
        :param input_data: داده‌های ورودی برای پیش‌بینی
        :return: نتیجه پیش‌بینی
        """
        # پیش‌پردازش داده‌ها
        processed_data = self.preprocess_data(input_data)

        # اجرای مدل
        input_name = self.session.get_inputs()[0].name
        output_name = self.session.get_outputs()[0].name
        predictions = self.session.run([output_name], {input_name: processed_data})

        return predictions

    def run_prediction_from_db(self, query):
        """
        دریافت داده از پایگاه داده و انجام پیش‌بینی
        :param query: کوئری برای دریافت داده از پایگاه داده
        :return: نتیجه پیش‌بینی
        """
        # دریافت داده از پایگاه داده
        data = get_data_from_database(query)

        # انجام پیش‌بینی
        result = self.predict(data)

        return result
```

---

### **نحوه استفاده از کلاس**

1. **بارگذاری مدل:**
   ```python
   predictor = ModelPredictor(model_name="MyDeepLearningModel", model_path="model_directory/model.onnx")
   ```

2. **اجرای پیش‌بینی:**
   ```python
   query = "SELECT * FROM my_table WHERE condition"
   predictions = predictor.run_prediction_from_db(query)
   print(predictions)
   ```

---

### **نکات مهم**
- **استانداردسازی:** مطمئن شوید که تمام مدل‌ها به فرمت ONNX ذخیره شده‌اند و در پوشه `model directory` قرار دارند.
- **مستندسازی:** هر مدل باید با نام و توضیحات مناسب در مستندات پروژه ثبت شود.
- **پیش‌پردازش:** مطمئن شوید که تابع `preprocess_data` به‌درستی داده‌ها را برای مدل آماده می‌کند.
- **پایگاه داده:** ماژول `database` باید به‌درستی تنظیم شود تا داده‌ها از پایگاه داده دریافت شوند.

با رعایت این دستورالعمل‌ها، می‌توانید مدل‌های خود را به‌صورت استاندارد و قابل استفاده در پروژه قرار دهید. 🚀